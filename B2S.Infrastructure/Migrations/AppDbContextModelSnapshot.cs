// <auto-generated />
using System;
using B2S.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace B2S.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("B2S.Core.Entities.Agent", b =>
                {
                    b.Property<string>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("BusinessName")
                        .HasMaxLength(250);

                    b.Property<string>("BusinessNumber")
                        .HasMaxLength(25);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<string>("InvoiceSettingId")
                        .HasMaxLength(38);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LegalName")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.HasKey("AgentId");

                    b.HasIndex("InvoiceSettingId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("B2S.Core.Entities.Bed", b =>
                {
                    b.Property<string>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<int>("Status");

                    b.HasKey("BedId");

                    b.HasIndex("RoomId");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("B2S.Core.Entities.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("AgentId")
                        .HasMaxLength(38);

                    b.Property<string>("BedId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("BookingFrom");

                    b.Property<DateTime>("BookingTo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<string>("CustomerId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<decimal>("DepositAmount");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Gender");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(50);

                    b.Property<int>("IDType");

                    b.Property<bool>("IsConfirmOA");

                    b.Property<bool>("IsConfirmTC");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<decimal>("Price");

                    b.Property<int>("Status");

                    b.HasKey("BookingId");

                    b.HasIndex("AgentId");

                    b.HasIndex("BedId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("B2S.Core.Entities.BookingData", b =>
                {
                    b.Property<string>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("Agent")
                        .HasMaxLength(20);

                    b.Property<string>("Bed")
                        .HasMaxLength(20);

                    b.Property<string>("Country")
                        .HasMaxLength(20);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200);

                    b.Property<DateTime>("FinishDate");

                    b.Property<string>("Gender")
                        .HasMaxLength(20);

                    b.Property<string>("Property")
                        .HasMaxLength(200);

                    b.Property<string>("Room")
                        .HasMaxLength(20);

                    b.Property<DateTime>("StartDate");

                    b.HasKey("BookingId");

                    b.ToTable("BookingData");
                });

            modelBuilder.Entity("B2S.Core.Entities.BookingNote", b =>
                {
                    b.Property<string>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Title")
                        .HasMaxLength(250);

                    b.HasKey("NoteId");

                    b.ToTable("BookingNote");
                });

            modelBuilder.Entity("B2S.Core.Entities.Building", b =>
                {
                    b.Property<string>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("BuildingId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("B2S.Core.Entities.BuildingImage", b =>
                {
                    b.Property<string>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<byte[]>("ImageFile");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.HasKey("ImageId");

                    b.HasIndex("BuildingId");

                    b.ToTable("BuildingImage");
                });

            modelBuilder.Entity("B2S.Core.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Gender");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(50);

                    b.Property<int>("IDType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("B2S.Core.Entities.DamageReport", b =>
                {
                    b.Property<string>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<decimal>("ActualRepairCost");

                    b.Property<string>("BookingId")
                        .HasMaxLength(38);

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50);

                    b.Property<int>("DamageStatus");

                    b.Property<int>("DamageType");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<decimal>("EstimateRepairCost");

                    b.Property<DateTime>("IncidentDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<string>("ReportName")
                        .HasMaxLength(250);

                    b.Property<string>("ReportPerson")
                        .HasMaxLength(50);

                    b.HasKey("ReportId");

                    b.HasIndex("PropertyId");

                    b.ToTable("DamageReport");
                });

            modelBuilder.Entity("B2S.Core.Entities.EmailTemplate", b =>
                {
                    b.Property<string>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("BodyHTML");

                    b.Property<string>("BodyText");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Subject")
                        .HasMaxLength(250);

                    b.Property<string>("TemplatName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("B2S.Core.Entities.Expense", b =>
                {
                    b.Property<string>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<decimal>("Amount");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpenseDate");

                    b.Property<string>("FileName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<byte[]>("Receipt");

                    b.Property<string>("Reference")
                        .HasMaxLength(38);

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("ExpenseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("B2S.Core.Entities.ExpenseCategory", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("AccountCode")
                        .HasMaxLength(25);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ColorHex")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.HasKey("CategoryId");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("B2S.Core.Entities.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("AgentId")
                        .HasMaxLength(38);

                    b.Property<string>("BookingId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<string>("CustomerId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<decimal>("DiscountAmount");

                    b.Property<DateTime>("DueDate");

                    b.Property<decimal>("InvoiceAmount");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(38);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<int>("PaymentStatus");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("TaxAmount");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AgentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("B2S.Core.Entities.InvoiceItem", b =>
                {
                    b.Property<string>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(38);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Item")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("B2S.Core.Entities.InvoiceSetting", b =>
                {
                    b.Property<string>("InvoiceSettingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<bool>("AutoSend");

                    b.Property<string>("BSBNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("BusinessLogoUrl");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(250);

                    b.Property<string>("BusinessNumber")
                        .HasMaxLength(25);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Currency")
                        .HasMaxLength(5);

                    b.Property<string>("CurrentInvoiceNo")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmailTemplateId")
                        .HasMaxLength(38);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<int>("PaymentMethod");

                    b.Property<string>("PaymentNote");

                    b.Property<int>("PaymentTerm");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<string>("PrefixInvoiceNo")
                        .HasMaxLength(10);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.Property<int>("RecurringPeriod");

                    b.Property<int>("RecurringType");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxPercentage");

                    b.Property<string>("Website")
                        .HasMaxLength(50);

                    b.HasKey("InvoiceSettingId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("InvoiceSetting");
                });

            modelBuilder.Entity("B2S.Core.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("AgentId")
                        .HasMaxLength(38);

                    b.Property<decimal>("Amount");

                    b.Property<string>("BookingId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<string>("CustomerId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<bool>("IsCreateInvoice");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Payee")
                        .HasMaxLength(250);

                    b.Property<DateTime>("PaymentDate");

                    b.Property<int>("PaymentMethod");

                    b.Property<int>("PaymentStatus");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.HasKey("PaymentId");

                    b.HasIndex("AgentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("B2S.Core.Entities.ProfileRole", b =>
                {
                    b.Property<string>("UserProfileId")
                        .HasMaxLength(38);

                    b.Property<string>("RoleId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.HasKey("UserProfileId", "RoleId");

                    b.HasAlternateKey("RoleId", "UserProfileId");

                    b.HasIndex("RoleId");

                    b.ToTable("ProfileRole");
                });

            modelBuilder.Entity("B2S.Core.Entities.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(250);

                    b.Property<int>("PropertyType");

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("PropertyId");

                    b.HasIndex("VendorId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("B2S.Core.Entities.PropertyDocument", b =>
                {
                    b.Property<string>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte[]>("FileBody");

                    b.Property<string>("FileName")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("DocumentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyDocument");
                });

            modelBuilder.Entity("B2S.Core.Entities.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("BuildingId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<string>("RoomName")
                        .HasMaxLength(250);

                    b.Property<string>("RoomTypeId")
                        .HasMaxLength(38);

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("B2S.Core.Entities.RoomType", b =>
                {
                    b.Property<string>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<decimal>("DepositAmount");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<decimal>("Price");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("RoomTypeValue")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("RoomTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("B2S.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserProfileId")
                        .HasMaxLength(38);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserProfileId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("B2S.Core.Entities.UserAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(38);

                    b.Property<string>("UserId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.HasKey("AccountId", "UserId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("B2S.Core.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("UserProfileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserProfileId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("B2S.Core.Entities.Vendor", b =>
                {
                    b.Property<string>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(38);

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(38);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.Property<string>("VendorName")
                        .HasMaxLength(250);

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("B2S.Core.Entities.Agent", b =>
                {
                    b.HasOne("B2S.Core.Entities.InvoiceSetting", "InvoiceSetting")
                        .WithMany()
                        .HasForeignKey("InvoiceSettingId");
                });

            modelBuilder.Entity("B2S.Core.Entities.Bed", b =>
                {
                    b.HasOne("B2S.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.Booking", b =>
                {
                    b.HasOne("B2S.Core.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("B2S.Core.Entities.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("B2S.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("B2S.Core.Entities.Building", b =>
                {
                    b.HasOne("B2S.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.BuildingImage", b =>
                {
                    b.HasOne("B2S.Core.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.DamageReport", b =>
                {
                    b.HasOne("B2S.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.Expense", b =>
                {
                    b.HasOne("B2S.Core.Entities.ExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("B2S.Core.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.Invoice", b =>
                {
                    b.HasOne("B2S.Core.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("B2S.Core.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("B2S.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("B2S.Core.Entities.InvoiceItem", b =>
                {
                    b.HasOne("B2S.Core.Entities.Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("B2S.Core.Entities.InvoiceSetting", b =>
                {
                    b.HasOne("B2S.Core.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId");
                });

            modelBuilder.Entity("B2S.Core.Entities.Payment", b =>
                {
                    b.HasOne("B2S.Core.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("B2S.Core.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("B2S.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("B2S.Core.Entities.ProfileRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("B2S.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.Property", b =>
                {
                    b.HasOne("B2S.Core.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.PropertyDocument", b =>
                {
                    b.HasOne("B2S.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.Room", b =>
                {
                    b.HasOne("B2S.Core.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("B2S.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("B2S.Core.Entities.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId");
                });

            modelBuilder.Entity("B2S.Core.Entities.RoomType", b =>
                {
                    b.HasOne("B2S.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("B2S.Core.Entities.User", b =>
                {
                    b.HasOne("B2S.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("B2S.Core.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("B2S.Core.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("B2S.Core.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("B2S.Core.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
